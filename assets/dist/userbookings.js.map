{"version":3,"file":"userbookings.js","mappings":"mBAEA,MAAMA,EAAUC,SAASC,eAAe,iCAClCC,EAAYH,EAAQI,aAAa,sBACvC,IAAIC,GAOJ,SAAWC,GACTD,EAAkBC,EAAeC,cAAcJ,GAC/CK,MAAM,GAAGH,EAAgBI,+CACtBC,MAAMC,GAAaA,EAASC,SAC5BF,MAAMG,GAIX,SAAoBC,GAClB,IAAIC,EAAgB,GACpBA,EAAgBD,EAAY,gBAC5BC,EAAcC,SAAQ,SAAUC,EAAOC,GACrC,IAAI,MAAEC,GAAUF,EAChBE,EAAQC,KAAKD,GACbX,MACE,GAAGH,EAAgBI,iDAAiDU,KAEnET,MAAMC,GAAaA,EAASC,SAC5BF,MAAMG,IACLE,EAAcG,GAAOG,YAAcR,EAAK,gBAAgB,GAAGQ,YAC3DN,EAAcG,GAAOI,UAAYT,EAAK,gBAAgB,GAAGU,KAOjE,SAAyCV,GACvC,MAAMW,EAAmBxB,EAAQyB,cAAc,gBAAgBtB,KAK/D,GAJ8D,OAAxCH,EAAQyB,cAAc,gBAE1CD,EAAiBE,UAAY,IAEZ,OAAfb,EAAKc,OAA+B,OAAbd,EAAKe,IAC9B,OAAO,EAET,MAAMC,EAAY,IAAIC,KAAKjB,EAAKc,OAAOI,mBAAmB,QAAS,CACjEC,QAAS,QACTC,KAAM,UACNC,MAAO,QACPC,IAAK,YAEDC,EAAY,IAAIN,KAAKjB,EAAKc,OAAOU,mBAAmB,QAAS,CACjEC,KAAM,UACNC,OAAQ,YAEJC,EAAU,IAAIV,KAAKjB,EAAKe,KAAKG,mBAAmB,QAAS,CAC7DC,QAAS,QACTC,KAAM,UACNC,MAAO,QACPC,IAAK,YAEDM,EAAU,IAAIX,KAAKjB,EAAKe,KAAKS,mBAAmB,QAAS,CAC7DC,KAAM,UACNC,OAAQ,YAGJG,EAAezC,SAAS0C,cAAc,UAC5CD,EAAaE,UAAUC,IAAI,OAC3BH,EAAaE,UAAUC,IAAI,cAC3BH,EAAaI,UAAY,eACzBJ,EAAaK,QAAU,SAAUC,GAC/BA,EAAEC,kBAIJ,MAAMC,EAAWjD,SAAS0C,cAAc,QACxCO,EAASN,UAAUC,IAAI,YACvBK,EAASxB,UAAY,MAAMb,EAAKQ,wCAAwCR,EAAKsC,iBAE7E,MAAMxB,EAAQ1B,SAAS0C,cAAc,QACrChB,EAAMD,UAAY,GAAGG,SAAiBO,IAEtC,MAAMR,EAAM3B,SAAS0C,cAAc,QACnCf,EAAIF,UAAY,GAAGc,SAAeC,IAElC,MAAMW,EAAYnD,SAAS0C,cAAc,OACnCU,EAAgBpD,SAAS0C,cAAc,OAC7CU,EAAcT,UAAUC,IAAI,kBAE5B,MAAMS,EAAkBrD,SAAS0C,cAAc,OAC/CW,EAAgBV,UAAUC,IAAI,oBAE9BO,EAAUG,aAAa,UAAW1C,EAAK2C,IACvCJ,EAAUR,UAAUC,IAAI,gBACxBO,EAAUK,OAAOP,GACjBG,EAAcI,OAAO9B,EAAO,IAAKC,GACjCwB,EAAUK,OAAOJ,GACjBC,EAAgBG,OAAOf,GACvBU,EAAUK,OAAOH,GACjB9B,EAAiBiC,OAAOL,GArElBM,CAAgC3C,EAAcG,UAjBlCyC,CAAW9C,KAJ/B,CAKGP,iB","sources":["webpack://@fullcalendar-example-projects/webpack/./src/userbookings.js"],"sourcesContent":["import \"./userbookings.css\";\n\nconst element = document.getElementById(\"booking-filters-user_bookings\");\nconst elementId = element.getAttribute(\"booking-element-id\");\nlet elementSettings;\n/* eslint no-underscore-dangle: 0 */\n/**\n * Provide an overview of user bookings with data from Drupal.\n *\n * @param {object} drupalSettings : Drupal settings added to this js.\n */\n(function (drupalSettings) {\n  elementSettings = drupalSettings.user_bookings[elementId];\n  fetch(`${elementSettings.front_page_url}/itkdev_booking/user-bookings`)\n    .then((response) => response.json())\n    .then((data) => handleData(data));\n})(drupalSettings);\n\n/** @param {object} bookingData : Data object retrieved from api endpoint */\nfunction handleData(bookingData) {\n  let dataFormatted = [];\n  dataFormatted = bookingData[\"hydra:member\"];\n  dataFormatted.forEach(function (value, index) {\n    let { hitId } = value;\n    hitId = btoa(hitId);\n    fetch(\n      `${elementSettings.front_page_url}/itkdev_booking/booking-details/${hitId}`\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        dataFormatted[index].displayName = data[\"hydra:member\"][0].displayName;\n        dataFormatted[index].eventBody = data[\"hydra:member\"][0].body;\n        appendElementToBookingContainer(dataFormatted[index]);\n      });\n  });\n}\n\n/** @param {object} data : Formatted data object retrieved from api endpoint */\nfunction appendElementToBookingContainer(data) {\n  const bookingContainer = element.querySelector(`div.bookings-${elementId}`);\n  const loaderPresent = element.querySelector(\"div.loader\") !== null;\n  if (loaderPresent) {\n    bookingContainer.innerHTML = \"\";\n  }\n  if (data.start === null || data.end === null) {\n    return false;\n  }\n  const startDate = new Date(data.start).toLocaleDateString(\"da-dk\", {\n    weekday: \"short\",\n    year: \"numeric\",\n    month: \"short\",\n    day: \"numeric\",\n  });\n  const startTime = new Date(data.start).toLocaleTimeString(\"da-dk\", {\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n  });\n  const endDate = new Date(data.end).toLocaleDateString(\"da-dk\", {\n    weekday: \"short\",\n    year: \"numeric\",\n    month: \"short\",\n    day: \"numeric\",\n  });\n  const endTime = new Date(data.end).toLocaleTimeString(\"da-dk\", {\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n  });\n\n  const deleteButton = document.createElement(\"button\");\n  deleteButton.classList.add(\"btn\");\n  deleteButton.classList.add(\"btn-danger\");\n  deleteButton.innerText = \"Slet booking\";\n  deleteButton.onclick = function (e) {\n    e.preventDefault();\n    // removeBooking(data.id);\n  };\n\n  const location = document.createElement(\"span\");\n  location.classList.add(\"location\");\n  location.innerHTML = `<b>${data.displayName}</b><span class='subject'>${data.subject}</span>`;\n\n  const start = document.createElement(\"span\");\n  start.innerHTML = `${startDate} kl. ${startTime}`;\n\n  const end = document.createElement(\"span\");\n  end.innerHTML = `${endDate} kl. ${endTime}`;\n\n  const container = document.createElement(\"div\");\n  const dateContainer = document.createElement(\"div\");\n  dateContainer.classList.add(\"date-container\");\n\n  const buttonContainer = document.createElement(\"div\");\n  buttonContainer.classList.add(\"button-container\");\n\n  container.setAttribute(\"data-id\", data.id);\n  container.classList.add(\"user-booking\");\n  container.append(location);\n  dateContainer.append(start, \"â†’\", end);\n  container.append(dateContainer);\n  buttonContainer.append(deleteButton);\n  container.append(buttonContainer);\n  bookingContainer.append(container);\n}\n\n/** @param {string} id : unique id of the booking to be removed */\n/* function removeBooking(id) {\n  const params = {\n    param1: \"test1\",\n    param2: \"test2\",\n  };\n  const options = {\n    method: \"POST\",\n    body: JSON.stringify(params),\n  };\n  fetch(\n    `${elementSettings.front_page_url}/itkdev_booking/remove-booking`,\n    options\n  )\n    .then(function (response) {\n      return response.json();\n    })\n    .then(function (myJson) {\n      console.log(myJson);\n    });\n\n  document.querySelector(`div[data-id='${id}']`).remove();\n\n  return;\n} */\n\n/** @param {string} id : id of the booking to be edited */\n/* function editBooking(id) {\n  alert(`edit booking - ${id}`);\n} */\n"],"names":["element","document","getElementById","elementId","getAttribute","elementSettings","drupalSettings","user_bookings","fetch","front_page_url","then","response","json","data","bookingData","dataFormatted","forEach","value","index","hitId","btoa","displayName","eventBody","body","bookingContainer","querySelector","innerHTML","start","end","startDate","Date","toLocaleDateString","weekday","year","month","day","startTime","toLocaleTimeString","hour","minute","endDate","endTime","deleteButton","createElement","classList","add","innerText","onclick","e","preventDefault","location","subject","container","dateContainer","buttonContainer","setAttribute","id","append","appendElementToBookingContainer","handleData"],"sourceRoot":""}